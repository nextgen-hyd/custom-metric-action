name: 'Run Command with S3 Metrics and Logging'
description: 'Run a command, capture detailed metrics, and save comprehensive logs to S3'
inputs:
  command:
    description: 'The command to run'
    required: true
  step-name:
    description: 'Name of the step for log file naming'
    required: true
  aws-access-key-id:
    description: 'AWS Access Key ID for S3 logging'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key for S3 logging'
    required: true
  s3-bucket:
    description: 'S3 Bucket name for log storage'
    required: true
  s3-path-prefix:
    description: 'Optional S3 path prefix (e.g., logs/)'
    required: false
    default: 'github-action-logs/'
  log-retention-days:
    description: 'Number of days to retain logs'
    required: false
    default: '30'
outputs:
  output:
    description: 'Full command output (stdout + stderr)'
    value: ${{ steps.run-command.outputs.output }}
  stdout:
    description: 'Command stdout'
    value: ${{ steps.run-command.outputs.stdout }}
  stderr:
    description: 'Command stderr'
    value: ${{ steps.run-command.outputs.stderr }}
  exit-code:
    description: 'Command exit code'
    value: ${{ steps.run-command.outputs.exit-code }}
  duration:
    description: 'Time the command took to run, in seconds'
    value: ${{ steps.run-command.outputs.duration }}
  s3-log-file:
    description: 'S3 path to the generated log file'
    value: ${{ steps.run-command.outputs.s3-log-file }}
runs:
  using: 'composite'
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ env.AWS_REGION || 'us-east-1' }}

    - name: Prepare Temporary Logging Directory
      shell: bash
      run: mkdir -p /tmp/action-logs

    - name: Run Command with Metrics and S3 Logging
      id: run-command
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
      run: |
        # Sanitize step name for filename
        safe_step_name=$(echo "${{ inputs.step-name }}" | sed 's/[^a-zA-Z0-9_-]/_/g')
        
        # Use GitHub-provided variables for unique identification
        build_number="${{ github.run_id }}_${{ github.run_attempt }}"
        timestamp=$(date +%Y%m%d_%H%M%S)
        
        # Local log file path
        local_log_file="/tmp/action-logs/${safe_step_name}_${build_number}_${timestamp}.log"
        
        # S3 log file path
        s3_log_path="${{ inputs.s3-path-prefix }}${build_number}/${safe_step_name}_${timestamp}.log"
        
        # Start timing
        start_time=$(date +%s.%N)
        
        # Create a temporary file to capture stderr
        stderr_file=$(mktemp)
        
        # Run the command and capture all outputs
        set +e  # Disable immediate exit on error
        output=$(bash -c "${{ inputs.command }}" 2> >(tee "$stderr_file" >&2) 2>&1)
        exit_code=$?
        
        # End timing and calculate duration
        end_time=$(date +%s.%N)
        duration=$(echo "scale=3; $end_time - $start_time" | bc)
        
        # Read stderr content
        stderr=$(cat "$stderr_file")
        rm "$stderr_file"
        
        # Prepare comprehensive log
        {
          echo "=== GITHUB WORKFLOW CONTEXT ==="
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Attempt: ${{ github.run_attempt }}"
          echo ""
          echo "=== COMMAND EXECUTION METRICS ==="
          echo "Step Name: ${{ inputs.step-name }}"
          echo "Timestamp: $timestamp"
          echo "Command: ${{ inputs.command }}"
          echo "Exit Code: $exit_code"
          echo "Duration: $duration seconds"
          echo ""
          echo "=== STANDARD OUTPUT ==="
          echo "$output"
          echo ""
          echo "=== STANDARD ERROR ==="
          echo "$stderr"
        } > "$local_log_file"
        
        # Upload to S3
        aws s3 cp "$local_log_file" "s3://${{ inputs.s3-bucket }}/$s3_log_path"
        
        # Set outputs
        echo "output<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "stdout<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "stderr<<EOF" >> $GITHUB_OUTPUT
        echo "$stderr" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "exit-code=$exit_code" >> $GITHUB_OUTPUT
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "s3-log-file=s3://${{ inputs.s3-bucket }}/$s3_log_path" >> $GITHUB_OUTPUT

    - name: Cleanup Local Logs
      shell: bash
      run: rm -rf /tmp/action-logs
